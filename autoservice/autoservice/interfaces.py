from __future__ import annotations
from typing import Protocol, Iterable, Optional
from datetime import datetime
from .domain import Client, Appointment, Invoice

class TimeProvider(Protocol):
    def now(self) -> datetime: ...

class EmailService(Protocol):
    def send(self, *, to: str, subject: str, body: str) -> None: ...

class NotificationService(Protocol):
    def notify(self, *, channel: str, payload: dict) -> None: ...

class PaymentGateway(Protocol):
    def charge(self, *, client_id: int, amount: float) -> bool: ...

class AppointmentRepository(Protocol):
    def add_client(self, client: Client) -> int: ...
    def get_client(self, client_id: int) -> Optional[Client]: ...
    def get_client_email(self, client_id: int) -> str: ...
    def create_appointment(self, client_id: int, when: datetime, description: str) -> int: ...
    def get_appointment(self, appointment_id: int) -> Optional[Appointment]: ...
    def list_appointments(self) -> Iterable[Appointment]: ...
    def create_invoice(self, appointment_id: int, amount: float, issued_at: datetime) -> int: ...
    def count_appointments(self) -> int: ...
